// Mokhtar Samy

HasTag (Edge) arc
De même que les autre Edges / Arcs

1) On crée la classe type Edge

 if (db.getClass("HasTag") == null) {
            OClass hasTag = db.createEdgeClass("HasTag");
            hasTag.createProperty("idPost", OType.STRING);
            hasTag.createProperty("idTag", OType.STRING);
            hasTag.createIndex("hastag_index", OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX, "idPost", "idTag");
        }


2) On charge les données de CSV
   List<List<String>> records5 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/post_hasTag_tag_0_0.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records5.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

3) On prépare les données pour crée l'entité dans la base
private void loadHasTag(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String idPost = lineArray.get(0);
            String idTag = lineArray.get(1);

            String query1 = "SELECT * from Post where idPost = ?";
            OResultSet rs1 = db.query(query1, idPost);
            Optional<OVertex> optionalID = rs1.vertexStream().findFirst();
            OVertex refPost = optionalID.get();

            String query2 = "SELECT * from Tag where idTag = ?";
            OResultSet rs2 = db.query(query2, idTag);
            Optional<OVertex> optionalID2 = rs2.vertexStream().findFirst();
            OVertex refTag = optionalID2.get();

            String query = "SELECT * from HasTag where idPost = ? and idTag = ? ";
            OResultSet rs = db.query(query, idPost, idTag);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createHasTag(refPost, refTag);
            }
        }
    }

4) On crée l'arc HasTag dans la base de données et persite avec save()

  private void createHasTag(OVertex idPost, OVertex idTag) {
        OElement hasTag = db.newEdge(idPost, idTag, "HasTag");
        hasTag.setProperty("idPost", idPost.getProperty("idPost"));
        hasTag.setProperty("idTag", idTag.getProperty("idTag"));
        hasTag.save();
    }




/* RESULTATS

SELECT * FROM HasTag LIMIT 20

+----+-------+------+--------+-----+------+-------------+
|#   |@RID   |@CLASS|in      |idTag|out   |idPost       |
+----+-------+------+--------+-----+------+-------------+
|0   |#114:0 |HasTag|#102:6  |52   |#90:0 |1236950581248|
|1   |#114:1 |HasTag|#102:333|2668 |#96:1 |1786706395304|
|2   |#114:2 |HasTag|#102:197|1580 |#94:3 |1099511628086|
|3   |#114:3 |HasTag|#100:142|1138 |#92:5 |2061584302540|
|4   |#114:4 |HasTag|#98:120 |960  |#97:6 |2061584302709|
|5   |#114:5 |HasTag|#105:58 |471  |#96:8 |274877907678 |
|6   |#114:6 |HasTag|#101:322|2579 |#93:10|549755814733 |
|7   |#114:7 |HasTag|#99:241 |1929 |#90:53|687194768710 |
|8   |#114:8 |HasTag|#102:136|1092 |#94:54|962072675819 |
|9   |#114:9 |HasTag|#104:789|6318 |#91:56|137438955113 |
|10  |#114:10|HasTag|#100:419|3354 |#97:57|137438955257 |
|11  |#114:11|HasTag|#104:124|998  |#97:59|962072676271 |
|12  |#114:12|HasTag|#98:417 |3336 |#94:61|137438955553 |
|13  |#114:13|HasTag|#104:125|1006 |#91:63|962072676564 |
|14  |#114:14|HasTag|#101:376|3011 |#94:64|137438955870 |
|15  |#114:15|HasTag|#103:344|2757 |#90:66|962072676868 |
|16  |#114:16|HasTag|#103:899|7197 |#93:67|1649267444384|
|17  |#114:17|HasTag|#102:5  |44   |#91:69|1649267444545|
|18  |#114:18|HasTag|#102:2  |20   |#97:70|962072677326 |
|19  |#114:19|HasTag|#101:889|7115 |#95:72|1649267444822|
+----+-------+------+--------+-----+------+-------------+

20 item(s) found. Query executed in 0.05 sec(s).
*/