// MOKHTAR SAMY

public class GraphLoader {

    ODatabaseSession db;

    public GraphLoader(ODatabaseSession db) {
        this.db = db;
    }

    public void createSocialNetworkGraph() throws ParseException {

        /*
        if (db.getClass("Person") == null) {
            OClass person = db.createVertexClass("Person");
            person.createProperty("id", OType.STRING);
            person.createProperty("firstName", OType.STRING);
            person.createProperty("lastName", OType.STRING);
            person.createProperty("gender", OType.STRING);
            person.createProperty("birthday", OType.DATE);
            person.createProperty("creationDate", OType.DATE);
            person.createProperty("locationIP", OType.STRING);
            person.createProperty("browserUsed", OType.STRING);
            person.createProperty("place", OType.INTEGER);
            person.createIndex("Person_id_index", OClass.INDEX_TYPE.UNIQUE, "id");
        }
        */
        if (db.getClass("Post") == null) {
            OClass post = db.createVertexClass("Post");
            post.createProperty("idPost", OType.STRING);
            post.createProperty("imageFile", OType.STRING);
            post.createProperty("creationDate", OType.DATE);
            post.createProperty("locationIP", OType.STRING);
            post.createProperty("browserUsed", OType.STRING);
            post.createProperty("language", OType.STRING);
            post.createProperty("content", OType.STRING);
            post.createProperty("length", OType.INTEGER);
            post.createIndex("Post_id_index", OClass.INDEX_TYPE.UNIQUE, "idPost");
        }

        if (db.getClass("Tag") == null) {
            OClass tag = db.createVertexClass("Tag");
            tag.createProperty("idTag", OType.STRING);
            tag.createProperty("name", OType.STRING);
            tag.createIndex("Tag_id_index", OClass.INDEX_TYPE.UNIQUE, "idTag");
        }

        if (db.getClass("Knows") == null) {
            OClass knows = db.createEdgeClass("Knows");
            knows.createProperty("idPerson", OType.STRING);
            knows.createProperty("idPerson2", OType.STRING);
            knows.createProperty("creationDate", OType.DATE);
            knows.createIndex("knows_index", OClass.INDEX_TYPE.NOTUNIQUE, "idPerson", "idPerson2");
        }

        if (db.getClass("HasTag") == null) {
            OClass hasTag = db.createEdgeClass("HasTag");
            hasTag.createProperty("idPost", OType.STRING);
            hasTag.createProperty("idTag", OType.STRING);
            hasTag.createIndex("hastag_index", OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX, "idPost", "idTag");
        }

        if (db.getClass("HasInterest") == null) {
            OClass hasInterest = db.createEdgeClass("HasInterest");
            hasInterest.createProperty("idPerson", OType.STRING);
            hasInterest.createProperty("idTag", OType.STRING);
            hasInterest.createIndex("hasinterest_index", OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX, "idPerson", "idTag");
        }

        if (db.getClass("HasCreated") == null) {
            OClass hasCreated = db.createEdgeClass("HasCreated");
            hasCreated.createProperty("idPost", OType.STRING);
            hasCreated.createProperty("idPerson", OType.STRING);
            hasCreated.createIndex("hasicreated_index", OClass.INDEX_TYPE.NOTUNIQUE_HASH_INDEX, "idPost", "idPerson");
        }
        loadSocialNetworkData();
    }

    public void loadSocialNetworkData() throws ParseException {
        List<List<String>> records = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/Customer/person_0_0.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records2 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/post_0_0.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records2.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records3 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/tag.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records3.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records4 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/person_knows_person_0_0.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records4.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records5 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/post_hasTag_tag_0_0.csv"));) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records5.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records6 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/person_hasInterest_tag_0_0.csv"))) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records6.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        List<List<String>> records7 = new ArrayList<>();
        try (CSVReader csvReader = new CSVReader(new FileReader("DATA/SocialNetwork/post_hasCreator_person_0_0.csv"))) {
            String[] values = null;
            while ((values = csvReader.readNext()) != null) {
                records7.add(Arrays.asList(values));
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        //loadPost(records2, db);
        //loadTag(records3, db);
        //loadKnows(records4, db);
        //loadHasTag(records5, db);
        //loadHasInterest(records6, db);
        //loadHasCreated(records7, db);
    }

    private void loadPerson(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            // split string by no space
            String[] line = records.get(p).toString().split("\\|");
            // Now convert string into ArrayList
            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));

            String id = lineArray.get(0);
            String firstName = lineArray.get(1);
            String lastName = lineArray.get(2);
            String gender = lineArray.get(3);
            String birthdayString = lineArray.get(4);
            Date birthday = new SimpleDateFormat("yyyy-MM-dd").parse(birthdayString);
            String creationDateString = lineArray.get(5);
            creationDateString = creationDateString.replace("T", " ");
            Date creationDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(creationDateString);
            String locationIP = lineArray.get(6);
            String browserUsed = lineArray.get(7);
            String place = lineArray.get(8);

            String query = "SELECT * from Person where id = ?";
            OResultSet rs = db.query(query, id);

            // Quand on appel rs.elementStream().count()rs.elementStream().count()
            // Il donne la première fois seulement comme FALSE et après TRUE sur la même record !!!!!!
            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createPerson(id, firstName, lastName, gender, birthday, creationDate, locationIP, browserUsed, place);
            }
        }
    }

    private void createPerson(String id, String firstname, String lastname,
                              String gender, Date birthday, Date creationDate,
                              String locationIP, String browserUsed, String place) {
        OVertex person = db.newVertex("Person");
        person.setProperty("id", id);
        person.setProperty("firstName", firstname);
        person.setProperty("lastName", lastname);
        person.setProperty("gender", gender);
        person.setProperty("birthday", birthday);
        person.setProperty("creationDate", creationDate);
        person.setProperty("locationIP", locationIP);
        person.setProperty("browserUsed", browserUsed);
        person.setProperty("place", Integer.parseInt(place));
        person.save();
    }

    private void loadPost(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {

            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));

            String id = lineArray.get(0);
            String imageFile = lineArray.get(1);
            String creationDateString = lineArray.get(2);
            creationDateString = creationDateString.replace("T", " ");
            Date creationDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(creationDateString);
            String locationIP = lineArray.get(3);
            String browserUsed = lineArray.get(4);
            String language = lineArray.get(5);
            String content = lineArray.get(6);
            String length = lineArray.get(7);

            String query = "SELECT * from Post where idPost = ?";
            OResultSet rs = db.query(query, id);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createPost(id, imageFile, creationDate, locationIP, browserUsed, language, content, length);
            }
        }
    }

    public void createPost(String id, String imageFile, Date creationDate,
                           String locationIP, String browserUsed,
                           String language, String content, String length) {
        OVertex post = db.newVertex("Post");
        post.setProperty("idPost", id);
        post.setProperty("imageFile", imageFile);
        post.setProperty("creationDate", creationDate);
        post.setProperty("locationIP", locationIP);
        post.setProperty("browserUsed", browserUsed);
        post.setProperty("language", language);
        post.setProperty("content", content);
        post.setProperty("length", Integer.parseInt(length));
        post.save();
    }

    private void loadTag(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split(",");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String id = lineArray.get(0);
            String name = lineArray.get(1);

            String query = "SELECT * from Tag where idTag = ?";
            OResultSet rs = db.query(query, id);

            // Quand on appel rs.elementStream().count()rs.elementStream().count()
            // Il donne la première fois seulement comme FALSE et après TRUE sur la même record !!!!!!
            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createTag(id, name);
            }
        }
    }

    private void createTag(String id, String name) {
        OVertex tag = db.newVertex("Tag");
        tag.setProperty("idTag", id);
        tag.setProperty("name", name);
        tag.save();
    }

    private void loadKnows(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String id = lineArray.get(0);
            String id2 = lineArray.get(1);
            String creationDateString = lineArray.get(2);
            creationDateString = creationDateString.replace("T", " ");
            Date creationDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(creationDateString);

            String query1 = "SELECT * from Customer where id = ?";
            OResultSet rs1 = db.query(query1, id);
            Optional<OVertex> optionalID = rs1.vertexStream().findFirst();
            OVertex refPerson1 = optionalID.get();

            String query2 = "SELECT * from Customer where id = ?";
            OResultSet rs2 = db.query(query2, id2);
            Optional<OVertex> optionalID2 = rs2.vertexStream().findFirst();
            OVertex refPerson2 = optionalID2.get();

            String query = "SELECT * from Knows where idPerson = ? and idPerson2 = ? ";
            OResultSet rs = db.query(query, id, id2);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createKnows(refPerson1, refPerson2, creationDate);
            }
        }
    }

    private void createKnows(OVertex id, OVertex id2, Date creationDate) {
        OElement knows = db.newEdge(id, id2, "Knows");
        knows.setProperty("idPerson", id.getProperty("id"));
        knows.setProperty("idPerson2", id2.getProperty("id"));
        knows.setProperty("creationDate", creationDate);
        knows.save();
    }

    private void loadHasTag(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String idPost = lineArray.get(0);
            String idTag = lineArray.get(1);

            String query1 = "SELECT * from Post where idPost = ?";
            OResultSet rs1 = db.query(query1, idPost);
            Optional<OVertex> optionalID = rs1.vertexStream().findFirst();
            OVertex refPost = optionalID.get();

            String query2 = "SELECT * from Tag where idTag = ?";
            OResultSet rs2 = db.query(query2, idTag);
            Optional<OVertex> optionalID2 = rs2.vertexStream().findFirst();
            OVertex refTag = optionalID2.get();

            String query = "SELECT * from HasTag where idPost = ? and idTag = ? ";
            OResultSet rs = db.query(query, idPost, idTag);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createHasTag(refPost, refTag);
            }
        }
    }

    private void createHasTag(OVertex idPost, OVertex idTag) {
        OElement hasTag = db.newEdge(idPost, idTag, "HasTag");
        hasTag.setProperty("idPost", idPost.getProperty("idPost"));
        hasTag.setProperty("idTag", idTag.getProperty("idTag"));
        hasTag.save();
    }

    private void loadHasInterest(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String idPerson = lineArray.get(0);
            String idTag = lineArray.get(1);

            String query1 = "SELECT * from Customer where id = ?";
            OResultSet rs1 = db.query(query1, idPerson);
            Optional<OVertex> optionalID = rs1.vertexStream().findFirst();
            OVertex refPerson = optionalID.get();

            String query2 = "SELECT * from Tag where idTag = ?";
            OResultSet rs2 = db.query(query2, idTag);
            Optional<OVertex> optionalID2 = rs2.vertexStream().findFirst();
            OVertex refTag = optionalID2.get();

            String query = "SELECT * from HasInterest where idPerson = ? and idTag = ? ";
            OResultSet rs = db.query(query, idPerson, idTag);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createHasInterest(refPerson, refTag);
            }
        }
    }

    private void createHasInterest(OVertex idPerson, OVertex idTag) {
        OElement hasInterest = db.newEdge(idPerson, idTag, "HasInterest");
        hasInterest.setProperty("idPerson", idPerson.getProperty("id"));
        hasInterest.setProperty("idTag", idTag.getProperty("idTag"));
        hasInterest.save();
    }

    private void loadHasCreated(List<List<String>> records) throws ParseException {
        for (int p = 1; p < records.size(); p++) {
            String[] line = records.get(p).toString().split("\\|");

            line[0] = line[0].replace("[", "");
            line[line.length - 1] = line[line.length - 1].replace("]", "");

            ArrayList<String> lineArray = new ArrayList<>(Arrays.asList(line));
            String idPost = lineArray.get(0);
            String idPerson = lineArray.get(1);

            String query1 = "SELECT * from Customer where id = ?";
            OResultSet rs1 = db.query(query1, idPerson);
            Optional<OVertex> optionalID = rs1.vertexStream().findFirst();
            OVertex refPerson = optionalID.get();

            String query2 = "SELECT * from Post where idPost = ?";
            OResultSet rs2 = db.query(query2, idPost);
            Optional<OVertex> optionalID2 = rs2.vertexStream().findFirst();
            OVertex refPost = optionalID2.get();

            String query = "SELECT * from HasCreated where idPost = ? and idPerson = ? ";
            OResultSet rs = db.query(query, idPost, idPerson);

            boolean createOrnot = rs.elementStream().count() == 0;
            if (createOrnot) {
                createHasCreated(refPost, refPerson);
            }
        }
    }

    private void createHasCreated(OVertex idPost, OVertex idPerson) {
        OElement hasCreated = db.newEdge(idPost.getRecord(), idPerson.getRecord(), "HasCreated");
        hasCreated.setProperty("idPost", idPost.getProperty("idPost"));
        hasCreated.setProperty("idPerson", idPerson.getProperty("id"));
        hasCreated.save();
    }


    public void createEdgeProductTag(){
        String query = "SELECT * from Product";
        OResultSet rs = db.query(query);

        String queryTag = "SELECT * from Tag ORDER BY name ASC";
        OResultSet rsTags = db.query(queryTag);

        if(db.getClass("ProductTag") == null){
            db.createEdgeClass("ProductTag");
        }

        while (rs.hasNext()) {
            OVertex newProduct = rs.next().getVertex().get();

            newProduct.addEdge(rsTags.next().getVertex().get(), "ProductTag");
            newProduct.save();
        }
    }
}

/* RESULTATS

 SELECT * FROM Post LIMIT 20

+----+------+------+------+--------+---------+---------+---------+---------+---------+---------+---------------+----------------------------------------------------+
|#   |@RID  |@CLASS|length|language|idPost   |out_HasCr|locationI|browserUs|creationD|imageFile|out_HasTag     |content                                             |
+----+------+------+------+--------+---------+---------+---------+---------+---------+---------+---------------+----------------------------------------------------+
|0   |#90:0 |Post  |140   |uz      |123695...|[#130:0] |41.138...|Intern...|2011-0...|         |[#114:0,#115...|About Armasight Spark CORE Multi-Purpose Night Vi...|
|1   |#90:1 |Post  |115   |uz      |137438...|[#130:8] |27.34....|Intern...|2011-1...|         |[#116:37,#11...|About Armasight Spark CORE Multi-Purpose Night Vi...|
|2   |#90:2 |Post  |0     |        |549755...|[#130:16]|41.138...|Intern...|2010-1...|photo5...|               |                                                    |
|3   |#90:3 |Post  |0     |        |412316...|[#130:24]|41.138...|Intern...|2010-0...|photo4...|               |                                                    |
|4   |#90:4 |Post  |0     |        |151182...|[#130:32]|41.138...|Intern...|2011-1...|photo1...|               |                                                    |
|5   |#90:5 |Post  |0     |        |192414...|[#130:40]|41.138...|Intern...|2012-0...|photo1...|               |                                                    |
|6   |#90:6 |Post  |0     |        |412316...|[#130:48]|41.138...|Intern...|2010-0...|photo4...|               |                                                    |
|7   |#90:7 |Post  |233   |tk      |123695...|[#130:56]|197.20...|Intern...|2011-0...|         |[#114:71,#11...|About NcStar Ruger 10/22 Weaver and 3/8&quot; Dov...|
|8   |#90:8 |Post  |120   |tk      |962072...|[#130:64]|80.208...|Firefox  |2011-0...|         |[#121:108,#1...|About Schwinn 450 Elliptical Trainer,  nsure the ...|
|9   |#90:9 |Post  |88    |tk      |164926...|[#130:72]|201.22...|Firefox  |2012-0...|         |[#118:148,#1...|About TKO Adjustable Weighted Vest,  ) is a profe...|
|10  |#90:10|Post  |94    |tk      |962072...|[#130:80]|101.13...|Firefox  |2011-0...|         |[#116:187,#1...|About NcStar Ruger 10/22 Weaver and 3/8&quot; Dov...|
|11  |#90:11|Post  |98    |uz      |137438...|[#130:88]|14.102...|Firefox  |2011-1...|         |[#119:226,#1...|About Shimano XT/XTR M775 Disc Brake Pads,  ouble...|
|12  |#90:12|Post  |0     |        |412316...|[#130:96]|1.1.7.155|Chrome   |2010-0...|photo4...|               |                                                    |
|13  |#90:13|Post  |0     |        |206158...|[#130:...|1.1.7.155|Chrome   |2012-1...|photo2...|               |                                                    |
|14  |#90:14|Post  |0     |        |178670...|[#130:...|1.1.7.155|Chrome   |2012-0...|photo1...|               |                                                    |
|15  |#90:15|Post  |0     |        |151182...|[#130:...|1.1.7.155|Chrome   |2012-0...|photo1...|               |                                                    |
|16  |#90:16|Post  |0     |        |178670...|[#130:...|1.1.7.155|Chrome   |2012-0...|photo1...|               |                                                    |
|17  |#90:17|Post  |90    |uz      |549755...|[#130:...|49.207...|Firefox  |2010-1...|         |[#117:246,#1...|About Nikon COOLSHOT Laser Rangefinder,  an Test ...|
|18  |#90:18|Post  |117   |uz      |549755...|[#130:...|46.36....|Firefox  |2010-1...|         |[#120:271,#1...|About Nikon COOLSHOT Laser Rangefinder,  nt issue...|
|19  |#90:19|Post  |0     |        |549755...|[#130:...|90.157...|Firefox  |2010-1...|photo5...|               |                                                    |
+----+------+------+------+--------+---------+---------+---------+---------+---------+---------+---------------+----------------------------------------------------+

20 item(s) found. Query executed in 0.01 sec(s).

SELECT * FROM Tag LIMIT 20

+----+------+------+-----+----------+-----------------+-------------------------------------------------+-------------------------------------------------------+
|#   |@RID  |@CLASS|idTag|name      |in_ProductTag    |in_HasInterest                                   |in_HasTag                                              |
+----+------+------+-----+----------+-----------------+-------------------------------------------------+-------------------------------------------------------+
|0   |#98:0 |Tag   |0    | Foreve...|[#162:0]         |                                                 |[#114:379,#114:381,#114:430,#114:501,#114:502,#114:5...|
|1   |#98:1 |Tag   |64   | Merc C...|[#162:1,#164:1...|[#123:1102,#123:2648,#129:24894,#129:29834,#12...|[#114:2217,#114:7023,#114:7101,#114:7159,#114:8451,#...|
|2   |#98:2 |Tag   |128  | Koalapop |[#162:2,#164:3...|                                                 |[#114:824,#114:3746,#114:4750,#114:18154,#114:19369,...|
|3   |#98:3 |Tag   |192  | Marchesa |[#162:3,#166:2...|                                                 |[#118:5308,#117:5335,#120:8909,#114:40722,#121:40812...|
|4   |#98:4 |Tag   |256  | Six Deuce|[#162:4,#166:2...|                                                 |[#114:20268,#114:26656,#114:43792,#114:57433,#114:77...|
|5   |#98:5 |Tag   |320  | Avirex   |[#162:5,#166:2...|                                                 |[#114:73299,#114:93100,#114:97246,#114:100906,#114:1...|
|6   |#98:6 |Tag   |384  | TNT      |[#162:6,#168:2...|                                                 |[#114:7998,#114:28322,#114:69266,#114:69421,#114:785...|
|7   |#98:7 |Tag   |448  | Six Deuce|[#162:7,#169:2...|                                                 |[#114:34186,#114:78579,#114:81769,#114:89717,#114:89...|
|8   |#98:8 |Tag   |512  | Tommy ...|[#162:8,#169:1...|                                                 |[#114:1158,#114:6523,#114:19228,#114:19255,#114:2880...|
|9   |#98:9 |Tag   |576  | Angels...|[#162:9,#163:1...|                                                 |[#114:11028,#114:18544,#114:35476,#114:37012,#114:38...|
|10  |#98:10|Tag   |640  | Hamilt...|[#162:10,#163:...|                                                 |[#114:4811,#114:26538,#114:32326,#114:47784,#114:582...|
|11  |#98:11|Tag   |704  | Foreve...|[#162:11,#164:...|                                                 |[#119:1831,#119:1835,#120:1851,#114:1860,#115:13990,...|
|12  |#98:12|Tag   |768  | Loyand...|[#162:12,#166:...|                                                 |[#118:20536,#114:20965,#115:25101,#121:27180,#117:44...|
|13  |#98:13|Tag   |832  | Mataano  |[#162:13,#166:...|                                                 |[#118:1844,#120:21035,#115:21085,#120:21108,#119:211...|
|14  |#98:14|Tag   |896  | Ex-Boy...|[#162:14,#168:...|                                                 |[#121:5484,#120:17698,#120:17699,#121:20550,#120:205...|
|15  |#98:15|Tag   |960  | Marchesa |[#162:15,#168:...|[#122:1375,#122:1458,#122:2106,#122:3813,#122:...|[#114:32,#114:4838,#114:10368,#114:13052,#114:13866,...|
|16  |#98:16|Tag   |1024 | Bujo     |[#162:16]        |                                                 |[#114:1215,#114:10722,#114:10732,#114:11978,#114:132...|
|17  |#98:17|Tag   |1088 | Koalapop |[#162:17,#165:...|                                                 |[#114:10708,#114:13176,#114:13294,#114:23714,#114:79...|
|18  |#98:18|Tag   |1152 | Izod     |[#162:18,#163:...|                                                 |[#114:2940,#114:9085,#114:61248,#114:70398,#114:7310...|
|19  |#98:19|Tag   |1216 | Dollie...|[#162:19]        |                                                 |[#114:137756,#114:152290,#114:160725,#114:160728,#11...|
+----+------+------+-----+----------+-----------------+-------------------------------------------------+-------------------------------------------------------+

20 item(s) found. Query executed in 0.041 sec(s).


SELECT * FROM Knows LIMIT 20

+----+-------+------+--------------+--------+-------------------+--------------+--------+
|#   |@RID   |@CLASS|idPerson      |in      |creationDate       |idPerson2     |out     |
+----+-------+------+--------------+--------+-------------------+--------------+--------+
|0   |#106:0 |Knows |4145          |#79:268 |2010-03-28 00:00:00|4149          |#74:0   |
|1   |#106:1 |Knows |6192          |#74:589 |2010-03-25 00:00:00|8054          |#74:311 |
|2   |#106:2 |Knows |6192          |#81:1057|2012-03-09 00:00:00|26388279072651|#74:311 |
|3   |#106:3 |Knows |8664          |#76:1015|2011-05-05 00:00:00|15393162790783|#78:777 |
|4   |#106:4 |Knows |10027         |#78:314 |2010-09-23 00:00:00|6597069771919 |#81:932 |
|5   |#106:5 |Knows |10664         |#81:441 |2011-12-27 00:00:00|24189255813532|#76:1088|
|6   |#106:6 |Knows |2199023261098 |#78:692 |2010-05-27 00:00:00|2199023265797 |#79:777 |
|7   |#106:7 |Knows |2199023261098 |#81:1121|2011-08-16 00:00:00|17592186052633|#79:777 |
|8   |#106:8 |Knows |2199023261728 |#77:92  |2012-05-11 00:00:00|28587302324634|#74:933 |
|9   |#106:9 |Knows |4398046519044 |#75:1132|2010-10-16 00:00:00|6597069772552 |#76:622 |
|10  |#106:10|Knows |10995116277772|#76:335 |2011-10-24 00:00:00|19791209301820|#78:311 |
|11  |#106:11|Knows |10995116286035|#75:963 |2011-04-15 00:00:00|13194139536580|#80:1088|
|12  |#106:12|Knows |10995116286035|#81:1157|2011-12-06 00:00:00|21990232560233|#80:1088|
|13  |#106:13|Knows |13194139536445|#76:1145|2011-04-06 00:00:00|13194139539301|#79:622 |
|14  |#106:14|Knows |13194139536445|#80:636 |2011-05-26 00:00:00|15393162797178|#79:622 |
|15  |#106:15|Knows |13194139538627|#75:1139|2011-04-16 00:00:00|13194139541417|#75:778 |
|16  |#106:16|Knows |15393162793476|#76:71  |2011-06-17 00:00:00|15393162794998|#76:467 |
|17  |#106:17|Knows |15393162793476|#80:254 |2011-07-11 00:00:00|17592186048421|#76:467 |
|18  |#106:18|Knows |15393162793476|#77:963 |2011-09-07 00:00:00|19791209308967|#76:467 |
|19  |#106:19|Knows |15393162797176|#76:292 |2011-10-19 00:00:00|19791209304019|#76:778 |
+----+-------+------+--------------+--------+-------------------+--------------+--------+

20 item(s) found. Query executed in 0.026 sec(s).

SELECT * FROM HasTag LIMIT 20

+----+-------+------+--------+-----+------+-------------+
|#   |@RID   |@CLASS|in      |idTag|out   |idPost       |
+----+-------+------+--------+-----+------+-------------+
|0   |#114:0 |HasTag|#102:6  |52   |#90:0 |1236950581248|
|1   |#114:1 |HasTag|#102:333|2668 |#96:1 |1786706395304|
|2   |#114:2 |HasTag|#102:197|1580 |#94:3 |1099511628086|
|3   |#114:3 |HasTag|#100:142|1138 |#92:5 |2061584302540|
|4   |#114:4 |HasTag|#98:120 |960  |#97:6 |2061584302709|
|5   |#114:5 |HasTag|#105:58 |471  |#96:8 |274877907678 |
|6   |#114:6 |HasTag|#101:322|2579 |#93:10|549755814733 |
|7   |#114:7 |HasTag|#99:241 |1929 |#90:53|687194768710 |
|8   |#114:8 |HasTag|#102:136|1092 |#94:54|962072675819 |
|9   |#114:9 |HasTag|#104:789|6318 |#91:56|137438955113 |
|10  |#114:10|HasTag|#100:419|3354 |#97:57|137438955257 |
|11  |#114:11|HasTag|#104:124|998  |#97:59|962072676271 |
|12  |#114:12|HasTag|#98:417 |3336 |#94:61|137438955553 |
|13  |#114:13|HasTag|#104:125|1006 |#91:63|962072676564 |
|14  |#114:14|HasTag|#101:376|3011 |#94:64|137438955870 |
|15  |#114:15|HasTag|#103:344|2757 |#90:66|962072676868 |
|16  |#114:16|HasTag|#103:899|7197 |#93:67|1649267444384|
|17  |#114:17|HasTag|#102:5  |44   |#91:69|1649267444545|
|18  |#114:18|HasTag|#102:2  |20   |#97:70|962072677326 |
|19  |#114:19|HasTag|#101:889|7115 |#95:72|1649267444822|
+----+-------+------+--------+-----+------+-------------+

20 item(s) found. Query executed in 0.05 sec(s).


SELECT * FROM HasInterest LIMIT 20

+----+-------+-----------+-------------+--------+-----+-----+
|#   |@RID   |@CLASS     |idPerson     |in      |idTag|out  |
+----+-------+-----------+-------------+--------+-----+-----+
|0   |#122:0 |HasInterest|4145         |#102:6  |52   |#74:0|
|1   |#122:1 |HasInterest|4145         |#99:949 |7593 |#74:0|
|2   |#122:2 |HasInterest|5296         |#105:406|3255 |#75:0|
|3   |#122:3 |HasInterest|6192         |#102:340|2724 |#76:0|
|4   |#122:4 |HasInterest|6660         |#101:20 |163  |#77:0|
|5   |#122:5 |HasInterest|8491         |#105:154|1239 |#78:0|
|6   |#122:6 |HasInterest|8491         |#104:715|5726 |#78:0|
|7   |#122:7 |HasInterest|8664         |#105:853|6831 |#79:0|
|8   |#122:8 |HasInterest|10027        |#104:310|2486 |#80:0|
|9   |#122:9 |HasInterest|10027        |#101:957|7659 |#80:0|
|10  |#122:10|HasInterest|2199023256013|#103:22 |181  |#74:1|
|11  |#122:11|HasInterest|2199023256728|#99:117 |937  |#75:1|
|12  |#122:12|HasInterest|2199023256728|#100:837|6698 |#75:1|
|13  |#122:13|HasInterest|2199023257584|#101:820|6563 |#76:1|
|14  |#122:14|HasInterest|2199023259985|#105:904|7239 |#77:1|
|15  |#122:15|HasInterest|2199023260758|#103:603|4829 |#78:1|
|16  |#122:16|HasInterest|2199023261098|#99:167 |1337 |#79:1|
|17  |#122:17|HasInterest|2199023261728|#103:249|1997 |#80:1|
|18  |#122:18|HasInterest|2199023261728|#105:841|6735 |#80:1|
|19  |#122:19|HasInterest|2199023262647|#99:849 |6793 |#81:1|
+----+-------+-----------+-------------+--------+-----+-----+

20 item(s) found. Query executed in 0.019 sec(s).


SELECT * FROM HasCreated LIMIT 20

+----+-------+----------+--------+-------+------+-------------+
|#   |@RID   |@CLASS    |idPerson|in     |out   |idPost       |
+----+-------+----------+--------+-------+------+-------------+
|0   |#130:0 |HasCreated|4145    |#74:0  |#90:0 |1236950581248|
|1   |#130:1 |HasCreated|4145    |#74:0  |#90:1 |1374389535395|
|2   |#130:2 |HasCreated|4145    |#74:0  |#90:2 |549755814902 |
|3   |#130:3 |HasCreated|4145    |#74:0  |#90:3 |412316861494 |
|4   |#130:4 |HasCreated|4145    |#74:0  |#90:4 |1511828489334|
|5   |#130:5 |HasCreated|4145    |#74:0  |#90:5 |1924145349814|
|6   |#130:6 |HasCreated|4145    |#74:0  |#90:6 |412316861705 |
|7   |#130:7 |HasCreated|5296    |#78:155|#90:7 |1236950582882|
|8   |#130:8 |HasCreated|6192    |#74:311|#90:8 |962072676657 |
|9   |#130:9 |HasCreated|6192    |#74:311|#90:9 |1649267444774|
|10  |#130:10|HasCreated|6192    |#74:311|#90:10|962072678098 |
|11  |#130:11|HasCreated|6660    |#78:466|#90:11|1374389539240|
|12  |#130:12|HasCreated|8491    |#74:622|#90:12|412316865116 |
|13  |#130:13|HasCreated|8491    |#74:622|#90:13|2061584306851|
|14  |#130:14|HasCreated|8491    |#74:622|#90:14|1786706399975|
|15  |#130:15|HasCreated|8491    |#74:622|#90:15|1511828493095|
|16  |#130:16|HasCreated|8491    |#74:622|#90:16|1786706400123|
|17  |#130:17|HasCreated|8664    |#78:777|#90:17|549755819305 |
|18  |#130:18|HasCreated|8664    |#78:777|#90:18|549755820258 |
|19  |#130:19|HasCreated|8664    |#78:777|#90:19|549755820891 |
+----+-------+----------+--------+-------+------+-------------+

20 item(s) found. Query executed in 0.017 sec(s).

SELECT * FROM ProductTag

+----+-------+----------+-------+-------+
|#   |@RID   |@CLASS    |in     |out    |
+----+-------+----------+-------+-------+
|0   |#162:0 |ProductTag|#98:0  |#34:0  |
|1   |#162:1 |ProductTag|#98:8  |#34:8  |
|2   |#162:2 |ProductTag|#98:16 |#34:16 |
|3   |#162:3 |ProductTag|#98:24 |#34:24 |
|4   |#162:4 |ProductTag|#98:32 |#34:32 |
|5   |#162:5 |ProductTag|#98:40 |#34:40 |
|6   |#162:6 |ProductTag|#98:48 |#34:48 |
|7   |#162:7 |ProductTag|#98:56 |#34:56 |
|8   |#162:8 |ProductTag|#98:64 |#34:64 |
|9   |#162:9 |ProductTag|#98:72 |#34:72 |
|10  |#162:10|ProductTag|#98:80 |#34:80 |
|11  |#162:11|ProductTag|#98:88 |#34:88 |
|12  |#162:12|ProductTag|#98:96 |#34:96 |
|13  |#162:13|ProductTag|#98:104|#34:104|
|14  |#162:14|ProductTag|#98:112|#34:112|
|15  |#162:15|ProductTag|#98:120|#34:120|
|16  |#162:16|ProductTag|#98:128|#34:128|
|17  |#162:17|ProductTag|#98:136|#34:136|
|18  |#162:18|ProductTag|#98:144|#34:144|
|19  |#162:19|ProductTag|#98:152|#34:152|
+----+-------+----------+-------+-------+
LIMIT EXCEEDED: resultset contains more items not displayed (limit=20)

*/

