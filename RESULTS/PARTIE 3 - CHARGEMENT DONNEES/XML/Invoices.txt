// MIA SWERY

public class InvoiceLoader {
    ODatabaseSession db;

    public InvoiceLoader(ODatabaseSession db){
        this.db = db;
    }

    public void load() throws ParserConfigurationException, IOException, SAXException, ParseException {

        if (db.getClass("Invoice") == null) {
            OClass invoice = db.createVertexClass("Invoice");
            invoice.createProperty("orderId", OType.STRING);
            invoice.createProperty("personId", OType.STRING);
            invoice.createProperty("orderDate", OType.DATE);
            invoice.createProperty("price", OType.FLOAT);
            //product.createProperty("imgUrl", OType.STRING);
            invoice.createIndex("invoice_orderId_index", OClass.INDEX_TYPE.UNIQUE, "orderId");
        }
        if (db.getClass("OrderlineInvoice")== null) {
            OClass OrderlineInvoice = db.createEdgeClass("OrderlineInvoice");
            OrderlineInvoice.createProperty("productId", OType.STRING);
            OrderlineInvoice.createIndex("orderlineInvoice_productId_index", OClass.INDEX_TYPE.NOTUNIQUE, "productId");
        }

        //Get Document Builder
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        //factory.setValidating(true);
        DocumentBuilder builder = factory.newDocumentBuilder();

        //Build Document
        Document document = builder.parse(new File("DATA/Invoice/Invoice.xml"));

        //Normalize the XML Structure; It's just too important !!
        document.getDocumentElement().normalize();

        Element root = document.getDocumentElement();

        //Get all invoices
        NodeList nList = document.getElementsByTagName("Invoice.xml");

        List<List<String>> records = new ArrayList<List<String>>();

        for (int temp = 0; temp < nList.getLength(); temp++)
        {
            Node node = nList.item(temp);
            //System.out.println("");    //Just a separator
            if (node.getNodeType() == Node.ELEMENT_NODE)
            {
                Element eElement = (Element) node;


                String orderid = eElement.getElementsByTagName("OrderId").item(0).getTextContent();
                //System.out.println("Order id : "  + orderid);

                String personid = eElement.getElementsByTagName("PersonId").item(0).getTextContent();
                //System.out.println("Person id : "  + personid );

                String orderdate = eElement.getElementsByTagName("OrderDate").item(0).getTextContent();
                //System.out.println("Order date : "  + orderdate);

                String totalprice = eElement.getElementsByTagName("TotalPrice").item(0).getTextContent();
                //System.out.println("Total price : "  + totalprice);


                NodeList orderLineList = eElement.getElementsByTagName("Orderline");//.getElementByTagName("").item(0).getTextContent();

                for (int j = 0; j < orderLineList.getLength(); j++) {

                    Node nodeOL = orderLineList.item(j);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElementOL = (Element) node;
                        /*String productid = eElementOL.getElementsByTagName("productId").item(0).getTextContent();
                        System.out.println("Order line - product id: " + productid);
                        String asin = eElementOL.getElementsByTagName("asin").item(0).getTextContent();
                        //System.out.println("Order line - asin: " + asin);
                        String title = eElementOL.getElementsByTagName("title").item(0).getTextContent();
                        //System.out.println("Order line - title: " + title);
                        String price = eElementOL.getElementsByTagName("price").item(0).getTextContent();
                        //System.out.println("Order line - price: " + price);
                        String brand = eElementOL.getElementsByTagName("brand").item(0).getTextContent();
                        //System.out.println("Order line - brand: " + brand);
                        */
                        String productid = eElementOL.getElementsByTagName("productId").item(0).getTextContent();
                        String asin = eElementOL.getElementsByTagName("asin").item(0).getTextContent();

                        String[] values = {orderid, personid, orderdate, totalprice,asin, productid}; // productid, asin, title, price, brand};
                        records.add(Arrays.asList(values));
                    }
                }
            }
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

        for(int p=0; p<records.size(); p++){
            // We check if the product already exists before adding it
            String query = "SELECT * from Invoice where orderId = ?";
            OResultSet rs = db.query(query, records.get(p).get(0));
            if(rs.elementStream().count()==0) {
                //System.out.println(records.get(p).get(1));
                OVertex invoice = createInvoice(db,
                        records.get(p).get(0),
                        records.get(p).get(1),
                        format.parse(records.get(p).get(2)),
                        Float.parseFloat(records.get(p).get(3))
                        );
                linkInvoiceToProduct(this.db, invoice,records.get(p).get(4),records.get(p).get(5));
            }
            rs.close();
        }

        System.out.println("The invoices have been loaded");

        //db.close();
    }

    private static OVertex createInvoice(ODatabaseSession db,
                                         String orderId,
                                         String personId,
                                         Date orderDate,
                                         float price) {
        OVertex result = db.newVertex("Invoice");
        result.setProperty("orderId", orderId);
        result.setProperty("personId", personId);
        result.setProperty("orderDate", orderDate);
        result.setProperty("price", price);
        result.save();
        return result;
    }

    private static OEdge linkInvoiceToProduct(ODatabaseSession db, OVertex invoice, String asin, String productId){
        String query = "SELECT * from Product where asin = ?";
        OResultSet rsp = db.query(query, asin);
        OEdge result = null;
        if(rsp.hasNext()){
            Optional<OVertex> optional = rsp.next().getVertex();
            rsp.close();
            if(optional.isPresent()){
                OVertex product = optional.get();
                result = db.newEdge(invoice, product, db.getClass("OrderlineInvoice"));
                result.save();
            }
        }
        return result;
    }
}

/* RESULTATS 

SELECT * FROM Invoice LIMIT 20

+----+-------+-------+--------------------+------------------------------------+-------+--------------+-------------------+
|#   |@RID   |@CLASS |out_OrderlineInvoice|orderId                             |price  |personId      |orderDate          |
+----+-------+-------+--------------------+------------------------------------+-------+--------------+-------------------+
|0   |#138:0 |Invoice|[#146:0]            |6711da51-dee6-452a-a7b8-f79a1cbb9436|723.88 |10995116278711|2022-09-01 00:00:00|
|1   |#138:1 |Invoice|[#146:8]            |566584d0-2c1a-4853-afb8-8b33deb45c49|1633.93|17592186044650|2019-06-01 00:00:00|
|2   |#138:2 |Invoice|[#146:16]           |bba7f68c-4169-469d-91b8-b6a11614ad10|1892.09|19791209300458|2024-08-01 00:00:00|
|3   |#138:3 |Invoice|[#146:24]           |4261d92c-4921-46f9-9823-3a1e1262297f|2397.12|19791209309920|2018-10-02 00:00:00|
|4   |#138:4 |Invoice|[#146:32]           |a6aa6d52-7388-4bd6-b3ed-4b80d9c3c1f6|685.5  |2199023261984 |2021-05-04 00:00:00|
|5   |#138:5 |Invoice|[#146:40]           |2b51626e-85b4-417e-9e6f-08c76000ac12|916.0  |24189255819387|2021-11-04 00:00:00|
|6   |#138:6 |Invoice|[#146:48]           |21199547-c7fb-477b-9736-637827bf8443|1169.49|28587302327331|2019-03-15 00:00:00|
|7   |#138:7 |Invoice|[#146:56]           |6fc2d599-3335-44b0-b3b2-b58cfeae2e5e|1593.18|32985348838628|2020-06-24 00:00:00|
|8   |#138:8 |Invoice|[#146:64]           |2b58a0e6-58ec-4cef-b0b0-12fe623568fa|2441.96|4398046512678 |2018-04-24 00:00:00|
|9   |#138:9 |Invoice|[#146:72]           |954f5857-478a-4360-9334-4fcd675799c1|1425.58|6597069769666 |2023-08-06 00:00:00|
|10  |#138:10|Invoice|[#146:80]           |1946154d-195f-49a9-a0fb-8f9547188b1c|1536.72|8796093023175 |2019-07-05 00:00:00|
|11  |#138:11|Invoice|[#146:88]           |8ab4bc83-d15a-44fa-b778-ae7b67e94948|1252.75|8796093032213 |2020-02-10 00:00:00|
|12  |#138:12|Invoice|[#146:96]           |ce123cb5-764d-4f34-93f3-342d41aaaa87|1243.49|10995116278874|2022-03-01 00:00:00|
|13  |#138:13|Invoice|[#146:104]          |10db701e-364a-4b7f-ab19-0b84f2224dce|2034.34|13194139542643|2020-07-17 00:00:00|
|14  |#138:14|Invoice|[#146:112]          |479a028e-7558-40e2-b693-628b9f5d4f4d|872.52 |17592186046593|2018-06-09 00:00:00|
|15  |#138:15|Invoice|[#146:120]          |261d343d-6f75-4e21-8c58-a64475012f86|1886.85|17592186052442|2020-10-16 00:00:00|
|16  |#138:16|Invoice|[#146:128]          |f4ad31ec-94de-4336-9a2a-282ab922ad9a|2076.23|2199023264696 |2020-01-24 00:00:00|
|17  |#138:17|Invoice|[#146:136]          |1d97e01f-b64a-4921-9deb-14997a9cf342|1980.51|24189255813654|2021-08-16 00:00:00|
|18  |#138:18|Invoice|[#146:144]          |948869a7-8c69-4ea1-85a4-5c3f42e409f4|1655.01|26388279072674|2023-10-06 00:00:00|
|19  |#138:19|Invoice|[#146:152]          |83e77f80-7229-4758-8664-2f68b754de45|1704.8 |30786325586482|2022-03-17 00:00:00|
+----+-------+-------+--------------------+------------------------------------+-------+--------------+-------------------+

20 item(s) found. Query executed in 0.051 sec(s).


SELECT * FROM OrderlineInvoice LIMIT 20

+----+-------+----------------+--------+--------+
|#   |@RID   |@CLASS          |in      |out     |
+----+-------+----------------+--------+--------+
|0   |#146:0 |OrderlineInvoice|#38:133 |#138:0  |
|1   |#146:1 |OrderlineInvoice|#40:493 |#138:8  |
|2   |#146:2 |OrderlineInvoice|#35:791 |#138:16 |
|3   |#146:3 |OrderlineInvoice|#34:542 |#138:24 |
|4   |#146:4 |OrderlineInvoice|#36:735 |#138:32 |
|5   |#146:5 |OrderlineInvoice|#36:452 |#138:40 |
|6   |#146:6 |OrderlineInvoice|#35:267 |#138:48 |
|7   |#146:7 |OrderlineInvoice|#38:140 |#138:56 |
|8   |#146:8 |OrderlineInvoice|#34:675 |#138:64 |
|9   |#146:9 |OrderlineInvoice|#39:282 |#138:72 |
|10  |#146:10|OrderlineInvoice|#37:1064|#138:80 |
|11  |#146:11|OrderlineInvoice|#36:507 |#138:88 |
|12  |#146:12|OrderlineInvoice|#38:766 |#138:96 |
|13  |#146:13|OrderlineInvoice|#39:402 |#138:104|
|14  |#146:14|OrderlineInvoice|#34:610 |#138:112|
|15  |#146:15|OrderlineInvoice|#38:213 |#138:120|
|16  |#146:16|OrderlineInvoice|#34:542 |#138:128|
|17  |#146:17|OrderlineInvoice|#37:828 |#138:136|
|18  |#146:18|OrderlineInvoice|#39:616 |#138:144|
|19  |#146:19|OrderlineInvoice|#40:1179|#138:152|
+----+-------+----------------+--------+--------+

20 item(s) found. Query executed in 0.069 sec(s).

*/

