// MOKHTAR SAMY

 public void updatePost(ODocument post) {
        String query = "SELECT * from Post where idPost = ?";
        OResultSet rs = db.query(query, post.getProperty("idPost").toString());
        Optional<OVertex> optionalPost = rs.vertexStream().findFirst();
        OVertex newPost = optionalPost.get();

        newPost.setProperty("browserUsed", post.getProperty("browserUsed"));
        newPost.setProperty("content", post.getProperty("content"));
        newPost.setProperty("creationDate", post.getProperty("creationDate"));
        newPost.setProperty("imageFile", post.getProperty("imageFile"));
        newPost.setProperty("length", post.getProperty("length"));
        newPost.setProperty("locationIP", post.getProperty("locationIP"));
        newPost.setProperty("language", post.getProperty("language"));
        newPost.save();
    }

    public void deletePost(OVertex post) {
        post.delete().save();
    }

    public void deletePost(String postID) {
        String query = "SELECT * from Post where idPost = ?";
        OResultSet rs = db.query(query, postID);
        Optional<OVertex> optionalPost = rs.vertexStream().findFirst();
        OVertex oldPost = optionalPost.get();
        oldPost.delete().save();
    }

    public void updateTag(ODocument Tag) {
        String query = "SELECT * from Tag where idTag = ?";
        OResultSet rs = db.query(query, Tag.getProperty("idTag").toString());
        Optional<OVertex> optionalTag = rs.vertexStream().findFirst();
        OVertex newTag = optionalTag.get();

        newTag.setProperty("name", Tag.getProperty("name"));
        newTag.save();
    }

    public void updateHasTag(OVertex fromPost, OVertex toTag, OVertex newToTag, OVertex newFromPost) {
        String query = "SELECT * from HasTag where in.idTag = ? and out.idPost = ?";

        OResultSet rs = db.query(query, toTag.getProperty("idTag").toString(), fromPost.getProperty("idPost").toString());
        Optional<OEdge> optionalhasTag = rs.edgeStream().findFirst();
        OEdge hasTag = optionalhasTag.get();

        if (newToTag != null) {
            Iterable<OEdge> edges = hasTag.getTo().getEdges(ODirection.IN);

            for (OEdge tag : edges) {
                if (tag.getIdentity().equals(toTag.getIdentity())) {
                    tag.delete();
                }
            }
            hasTag.getFrom().addEdge(newToTag);
        }

        if (newFromPost != null) {
            Iterable<OEdge> edges = hasTag.getTo().getEdges(ODirection.OUT);

            for (OEdge post : edges) {
                if (post.getIdentity().equals(toTag.getIdentity())) {
                    post.delete();
                }
            }
            hasTag.getTo().addEdge(newFromPost);
        }
        hasTag.save();
    }


  private void createKnows(OVertex id, OVertex id2, Date creationDate) {
        OElement knows = db.newEdge(id, id2, "Knows");
        knows.setProperty("idPerson", id.getProperty("id"));
        knows.setProperty("idPerson2", id2.getProperty("id"));
        knows.setProperty("creationDate", creationDate);
        knows.save();
    }


    public void createPost(String id, String imageFile, Date creationDate,
                           String locationIP, String browserUsed,
                           String language, String content, String length) {
        OVertex post = db.newVertex("Post");
        post.setProperty("idPost", id);
        post.setProperty("imageFile", imageFile);
        post.setProperty("creationDate", creationDate);
        post.setProperty("locationIP", locationIP);
        post.setProperty("browserUsed", browserUsed);
        post.setProperty("language", language);
        post.setProperty("content", content);
        post.setProperty("length", Integer.parseInt(length));
        post.save();
    }
/* 
RESULTATS
*/


    /* TEST update edge HasTag
            OVertex post = null;
            OVertex tag = null;
            OEdge hasTagEdge = null;


            ODocument newpost = new ODocument("Post");
            newpost.field("idPost", "1339511621255");
            newpost.field("imageFile", "anotherImage.png");
            newpost.field("creationDate",
                    new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2022-12-23 09:13:13.099+0000"));
            newpost.field("locationIP", "43.290.55.178");
            newpost.field("browerUsed", "Opera");
            newpost.field("language", "SP");
            newpost.field("content", "A new post 2");
            newpost.field("length", "890");

            graphLoader.createPost(newpost.getProperty("idPost").toString(), newpost.getProperty("imageFile").toString(),
                   newpost.getProperty("creationDate"), newpost.getProperty("locationIP").toString(),
                    newpost.getProperty("browerUsed").toString(), newpost.getProperty("language").toString(),
                    newpost.getProperty("content").toString(), newpost.getProperty("length").toString());

            ODocument newTag= new ODocument("Tag");
            newTag.field("idTag", "22100");
            newTag.field("name", "NewTag");

            graphLoader.createTag(newTag.getProperty("idTag").toString(), newTag.getProperty("name").toString());


            String queryPostNew = "SELECT * FROM Post WHERE idPost = ? LIMIT 20";
            OResultSet rsPostnew = db.query(queryPostNew, newpost.getProperty("idPost").toString());
            OVertex newpostVertex = rsPostnew.vertexStream().findFirst().get();

            String queryTagNew = "SELECT * FROM Tag WHERE idTag = ? LIMIT 20";
            OResultSet rsTagNew = db.query(queryTagNew, newTag.getProperty("idTag").toString());
            OVertex newtagVertex = rsTagNew.vertexStream().findFirst().get();


            String queryPost = "SELECT * FROM Post WHERE idPost = ? LIMIT 20";
            OResultSet rsPost = db.query(queryPost, "687194767630");
            post = rsPost.vertexStream().findFirst().get();

            String queryTag = "SELECT * FROM Tag WHERE idTag = ? LIMIT 20";
            OResultSet rsTag = db.query(queryTag, "3198");
            tag = rsTag.vertexStream().findFirst().get();

            graphLoader.updateHasTag(post, tag, newpostVertex, newtagVertex);

            newtagVertex.delete().save();
            newpostVertex.delete().save();


    // Mise Ã  jour post
        ODocument post = new ODocument("Post");
        post.field("idPost", "1399511627255");
        post.field("imageFile", "anotherImage.png");
        post.field("creationDate",
                new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2022-12-23 09:13:13.099+0000"));
        post.field("locationIP", "43.290.55.178");
        post.field("browerUsed", "Opera");
        post.field("language", "SP");
        post.field("content", "A new post 2");
        post.field("length", "890");

        graphLoader.updatePost(post);

        post.delete().save();