// EVA RADU

    /* --------------------------------------- */
    /* -- METHODS INSERT, UPDATE AND DELETE -- */
    /* --------------------------------------- */

    public static void insertOneVendor(ODatabaseSession db, ODocument doc) {

        String vendor = doc.getProperty("Vendor");
        String country = doc.getProperty("Country");
        String industry = doc.getProperty("Industry");

        String query = "SELECT * from VendorVertex where Vendor = ?";
        OResultSet rs = db.query(query, vendor);
        if (!rs.elementStream().findFirst().isPresent()) {
            createVendor(db, vendor, country, industry);
            System.out.println("The vendor " + vendor + " has been inserted");
        } else {
            System.out.println("The vendor " + vendor + " is already present among the vendor vertices");
        }
    }

    public static void deleteOneVendor(ODatabaseSession db, ODocument doc) {

        ORecord r = doc.getRecord();
        String s = r.toJSON();
        JSONObject json = (JSONObject) JSONValue.parse(s);


        String vendor = doc.getProperty("Vendor");

        String query = "SELECT * from VendorVertex where Vendor = ?";
        OResultSet rs = db.query(query, vendor);
        Optional vendorRes = rs.elementStream().findFirst();
        if (vendorRes.isPresent()) {
            db.delete((OVertex) vendorRes.get());
            System.out.println("The vendor " + vendor + " has been deleted");
        } else {
            System.out.println("The vendor " + vendor + " is already not present.");
        }
    }

    public static void updateOneVendor(ODatabaseSession db, ODocument doc) {

        String vendor = doc.getProperty("Vendor");
        String country = doc.getProperty("Country");
        String industry = doc.getProperty("Industry");

        String query = "SELECT * from VendorVertex where Vendor = ?";
        OResultSet rs = db.query(query, vendor);
        Optional vendorRes = rs.elementStream().findFirst();
        if (vendorRes.isPresent()) {
            OVertex customerVertex = (OVertex) vendorRes.get();
            db.delete(customerVertex);
            createVendor(db, vendor, country, industry);

            System.out.println("The vendor " + vendor + " has been updated");
        } else {
            System.out.println("The vendor " + vendor + " is not present.");
        }
    }

    /* ------------------------------------------------------- */
    /* -- METHODS INSERT, UPDATE AND DELETE FOR MANY VALUES -- */
    /* ------------------------------------------------------- */

    public static void insertManyVendors(ODatabaseSession db, List<ODocument> docs){
        for(ODocument document : docs){
            //System.out.println(document);
            insertOneVendor(db, document);
        }
    }

    public static void updateManyVendors(ODatabaseSession db, List<ODocument> docs){
        for(ODocument document : docs){
            updateOneVendor(db, document);
        }
    }

    public static void deleteManyVendors(ODatabaseSession db, List<ODocument> docs){
        for(ODocument document : docs){
            deleteOneVendor(db, document);
        }
    }

    public static void testCRUDMethods(ODatabaseSession db){
        /* ------------------------ */
        /* --- TESTS 4.4 VENDORS -- */
        /* ------------------------ */
        VendorLoader vendorLoader = new VendorLoader(db);

        ODocument docVendor1 = new ODocument("VendorVertex");
        docVendor1.field("Vendor", "EvaShop");
        docVendor1.field("Country", "Romania");
        docVendor1.field("Industry", "Clothes");

        ODocument docVendor2 = new ODocument("VendorVertex");
        docVendor2.field("Vendor", "EvaShop");
        docVendor2.field("Country", "Romania");
        docVendor2.field("Industry", "Sports");

        ODocument docVendor3 = new ODocument("VendorVertex");
        docVendor3.field("Vendor", "MiaShop");
        docVendor3.field("Country", "France");
        docVendor3.field("Industry", "Sports");

        List<ODocument> docsVendor = new ArrayList<ODocument>();
        docsVendor.add(docVendor2);
        docsVendor.add(docVendor3);

        vendorLoader.insertOneVendor(db,docVendor1);
        vendorLoader.updateOneVendor(db,docVendor2);
        vendorLoader.deleteOneVendor(db,docVendor3);

        vendorLoader.insertManyVendors(db,docsVendor);
        vendorLoader.updateManyVendors(db,docsVendor);
        vendorLoader.deleteManyVendors(db,docsVendor);
    }

// RESULTAT DE LA METHODE DE TEST
/*
The vendor EvaShop has been inserted
The vendor EvaShop has been updated
The vendor MiaShop is already not present.
The vendor EvaShop is already present among the vendor vertices
The vendor MiaShop has been inserted
The vendor EvaShop has been updated
The vendor MiaShop has been updated
The vendor EvaShop has been deleted
The vendor MiaShop has been deleted
*/
