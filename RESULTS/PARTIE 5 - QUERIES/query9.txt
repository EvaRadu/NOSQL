 //QUERY 9

    /*
    Query 9. Find top-3 companies who have the largest amount of sales at one country, for each
    company, compare the number of the male and female customers, and return the most recent
    posts of them.
    */
    
    /*EXPLICATIONS :
    - Pour récupérer les 3 compagnies ayant réalisé le plus de vente dans le pays donné en paramètre, j'utilise la requête : "Select out(\"IsFromBrand\").Vendor as brands, COUNT(*) as nbSells from Product where out(\"IsFromBrand\").Country = ? GROUP BY brands ORDER BY nbSells DESC". 
    En fait, on trouve en utilisant l'edge "IsFromBrand" l'ensemble des produits vendus par les marques d'un pays (celui donné en paramètre). Puis, on compte les produits vendus par marque dans l'ordre décroissant. Et on ne sélectionne que les 3 premiers résultats (ou moins s'il y a moins de 3 marques dans le pays). On récupère ces 3 compagnies dans une ArrayList.
    
    - Pour comparer le nombre d'acheteurs masculins et féminins dans ces entreprises, on récupère les ids des tous les acheteurs par marque dans un premier temps :  "select out.PersonId as PersonId from Orderline where in.asin in (select asin from Product WHERE OUT(\"IsFromBrand\").Vendor = ?)"
    Ensuite, conformément à la consigne ("and return the most recent posts of them"), quand on itère sur les ids des acheteurs, on récupère le dernier post de chaque individu : "SELECT out.idPost, out.content, out.creationDate from HASCREATED where idPerson = ? order by out.creationDate DESC" (on trie de manière décroissante les postes créés par un acheteur par date de création).
    On conserve donc toutes les ids dans une ArrayList.  On dénombre ensuite les acheteurs par genre : "SELECT COUNT(gender) as cptG, gender from Customer where id in ? group by gender order by cptG DESC"; et on sauvegarde ces résultats dans une HashMap. On compare alors les résultats obtenus. 
    On itère cet algorithme pour chaque compagnie (3 fois au maximum).
    
    */
 
 public static void query9(ODatabaseSession db, String Country) throws ParseException {


        //RECUPERER TOP3 MARQUES
        String queryC = "Select out(\"IsFromBrand\").Vendor as brands, COUNT(*) as nbSells from Product where out(\"IsFromBrand\").Country = ? GROUP BY brands ORDER BY nbSells DESC";
        OResultSet rsC = db.query(queryC, Country);
        System.out.println("\n========= BRANDS =========");
        int j= 0;

        ArrayList<String> brands = new ArrayList<>();
        while(rsC.hasNext() && j < 3) {
            OResult optional = rsC.next();
            brands.addAll(optional.getProperty("brands"));
            j++;
        }
        rsC.close();
        System.out.println(brands);

        //RECUPERER LES ID DES PERSONNES POUR MARQUE 1 (B1 pour BRAND1)
        String queryB1 = "select out.PersonId as PersonId from Orderline where in.asin in (select asin from Product WHERE OUT(\"IsFromBrand\").Vendor = ?)";
        OResultSet rsB1 = db.query(queryB1, brands.get(0));
        System.out.println("\n========= PERSONS =========");
        ArrayList<String> customersB1 = new ArrayList<>();

        while(rsB1.hasNext()) {
            OResult optional = rsB1.next();
            String personId = optional.getProperty("PersonId");
            customersB1.add(personId);
		//RECUPERER LE POST LE PLUS RECENT CREE PAR UN ACHETEUR 
            String subQuery = "SELECT out.idPost, out.content, out.creationDate from HASCREATED where idPerson = ? order by out.creationDate DESC";
            System.out.println("\n========= LAST POST =========");
            OResultSet res = db.query(subQuery,personId);
            if (res.hasNext()) {
                System.out.println("Last post of customer " + personId + ":");
                System.out.println(res.stream().findFirst().get());
            }
        }
        rsB1.close();
        System.out.println("done : \n" + customersB1);

	//DENOMBRER LES ACHETEURS DE LA MARQUE PAR GENRE
        System.out.println("\n========= PERSONS =========");
        Map dictB1 = new HashMap<String,Long>();
        System.out.println(customersB1);
        String q1 = "SELECT COUNT(gender) as cptG, gender from Customer where id in ? group by gender order by cptG DESC";
        OResultSet r1 = db.query(q1, customersB1);
        while (r1.hasNext()) {
            OResult optional = r1.next();
            dictB1.put((String) optional.getProperty("gender"),(Long) optional.getProperty("cptG") );
        }
        //COMPARER LES RESULTATS OBTENUS
        if ((long) dictB1.get("male") > (long) dictB1.get("female")){
            System.out.println("There are more male customers (" + dictB1.get("male") + ") than female ones (" + dictB1.get("female") + ")");
        }
        else if ((long) dictB1.get("male") < (long) dictB1.get("female")){
            System.out.println("There are more female customers (" + dictB1.get("female") + ") than male ones (" + dictB1.get("male") + ")");
        } else {
            System.out.println("There is as much male customers as female ones (" + dictB1.get("male") + ")");
        }

	//ON EFFECTUE LE MEME ALGORITHME POUR LES MARQUES SUIVANTES APPARTENANT AU TOP3
        if (j>=2) {
            String queryB2 = "select out.PersonId as PersonId from Orderline where in.asin in (select asin from Product WHERE OUT(\"IsFromBrand\").Vendor = ?)";
            OResultSet rsB2 = db.query(queryB1, brands.get(1));
            System.out.println("\n========= CUSTOMERS BY BRAND =========");
            ArrayList<String> personsB2 = new ArrayList<>();
            while (rsB2.hasNext()) {
                OResult optional = rsB2.next();
                String personId = (String) optional.getProperty("PersonId");
                personsB2.add(personId);

                String subQuery = "SELECT out.idPost, out.content, out.creationDate from HASCREATED where idPerson = ? order by out.creationDate DESC";
                System.out.println("\n========= LAST POST =========");
                OResultSet res = db.query(subQuery,personId);
                if (res.hasNext()) {
                    System.out.println("Last post of customer " + personId + ":");
                    System.out.println(res.stream().findFirst().get());
                }
            }
            rsB2.close();

            System.out.println("\n========= PERSONS =========");
            Map dictB2 = new HashMap<String,Long>();
            System.out.println(customersB1);
            String q2 = "SELECT COUNT(gender) as cptG, gender from Customer where id in ? group by gender order by cptG DESC";
            OResultSet r2 = db.query(q2, customersB1);
            while (r2.hasNext()) {
                OResult optional = r2.next();
                dictB2.put((String) optional.getProperty("gender"),(Long) optional.getProperty("cptG") );
            }
            if ((long) dictB2.get("male") > (long) dictB2.get("female")){
                System.out.println("There are more male customers (" + dictB2.get("male") + ") than female ones (" + dictB2.get("female") + ")");
            }
            else if ((long) dictB1.get("male") < (long) dictB2.get("female")){
                System.out.println("There are more female customers (" + dictB2.get("female") + ") than male ones (" + dictB2.get("male") + ")");
            } else {
                System.out.println("There is as much male customers as female ones (" + dictB2.get("male") + ")");
            }
        }

        if (j==3) {
            String queryB3 = "select out.PersonId as PersonId from Orderline where in.asin in (select asin from Product WHERE OUT(\"IsFromBrand\").Vendor = ?";
            OResultSet rsB3 = db.query(queryB1, brands.get(2));
            System.out.println("\n========= CUSTOMERS BY BRAND =========");
            ArrayList<String> personsB3 = new ArrayList<>();
            while (rsB3.hasNext()) {
                OResult optional = rsB3.next();
                String personId = optional.getProperty("PersonId");
                personsB3.add(optional.getProperty("PersonId"));

                String subQuery = "SELECT out.idPost, out.content, out.creationDate from HASCREATED where idPerson = ? order by out.creationDate DESC";
                System.out.println("\n========= LAST POST =========");
                OResultSet res = db.query(subQuery,personId);
                if (res.hasNext()) {
                    System.out.println("Last post of customer " + personId + ":");
                    System.out.println(res.stream().findFirst().get());
                }
            }
            rsB3.close();

            System.out.println("\n========= PERSONS =========");
            Map dictB3 = new HashMap<String,Long>();
            System.out.println(customersB1);
            String q3 = "SELECT COUNT(gender) as cptG, gender from Customer where id in ? group by gender order by cptG DESC";
            OResultSet r3 = db.query(q3, customersB1);
            while (r3.hasNext()) {
                OResult optional = r3.next();
                dictB3.put((String) optional.getProperty("gender"),(Long) optional.getProperty("cptG") );
            }
            if ((long) dictB3.get("male") > (long) dictB3.get("female")){
                System.out.println("There are more male customers (" + dictB3.get("male") + ") than female ones (" + dictB3.get("female") + ")");
            }
            else if ((long) dictB1.get("male") < (long) dictB3.get("female")){
                System.out.println("There are more female customers (" + dictB3.get("female") + ") than male ones (" + dictB3.get("male") + ")");
            } else {
                System.out.println("There is as much male customers as female ones (" + dictB3.get("male") + ")");
            }
        }
    }
